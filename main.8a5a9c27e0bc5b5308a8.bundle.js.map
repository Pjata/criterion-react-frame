{"version":3,"file":"main.8a5a9c27e0bc5b5308a8.bundle.js","sources":["webpack:///./src/stories/index.js"],"sourcesContent":["import React, { useState } from \"react\"\nimport Autosuggest from \"../components/Form/renderers/Autosuggest\"\n\nimport CriterionProviders from \"../components/Form/CriterionProviders\"\nimport { storiesOf } from \"@storybook/react\"\nimport { action } from \"@storybook/addon-actions\"\nimport HomeIcon from \"@material-ui/icons/Home\"\nimport FileIcon from \"@material-ui/icons/FileCopy\"\nimport TagMultipleIcon from \"@material-ui/icons/RemoveRedEye\"\nimport { withKnobs, text, object, boolean } from \"@storybook/addon-knobs\"\nimport CriterionFrameReadme from \"../tools/CriterionFrame.md\"\nimport { Button, Paper, MenuItem } from \"@material-ui/core\"\nimport { withReadme } from \"storybook-readme\"\nimport { muiTheme } from \"storybook-addon-material-ui\"\nimport FormikContainer, {\n  FormikContainerComponent\n} from \"../components/Form/FormikContainer\"\nimport InputAdornment from \"@material-ui/core/InputAdornment\"\nimport { createMuiTheme } from \"@material-ui/core/styles\"\n\nimport { MuiThemeProvider } from \"@material-ui/core/styles\"\nimport JssProvider from \"react-jss/lib/JssProvider\"\nimport Chipper from \"../components/Form/renderers/Chipper\"\nimport ChipperController from \"../components/ChipperController\"\nimport CriterionFrame from \"../components/CriterionFrame\"\nimport { TypeField } from \"../index\"\nimport * as Yup from \"yup\"\nimport i18n from \"./i18n\"\nconst stories = storiesOf(\"Utilities (DontTest)\", module)\n\nconst suggestions = [\n  { label: \"Afghanistan\" },\n  { label: \"Aland Islands\" },\n  { label: \"Albania\" },\n  { label: \"Algeria\" },\n  { label: \"American Samoa\" },\n  { label: \"Andorra\" },\n  { label: \"Angola\" },\n  { label: \"Anguilla\" },\n  { label: \"Antarctica\" },\n  { label: \"Antigua and Barbuda\" },\n  { label: \"Argentina\" },\n  { label: \"Armenia\" },\n  { label: \"Aruba\" },\n  { label: \"Australia\" },\n  { label: \"Austria\" },\n  { label: \"Azerbaijan\" },\n  { label: \"Bahamas\" },\n  { label: \"Bahrain\" },\n  { label: \"Bangladesh\" },\n  { label: \"Barbados\" },\n  { label: \"Belarus\" },\n  { label: \"Belgium\" },\n  { label: \"Belize\" },\n  { label: \"Benin\" },\n  { label: \"Bermuda\" },\n  { label: \"Bhutan\" },\n  { label: \"Bolivia, Plurinational State of\" },\n  { label: \"Bonaire, Sint Eustatius and Saba\" },\n  { label: \"Bosnia and Herzegovina\" },\n  { label: \"Botswana\" },\n  { label: \"Bouvet Island\" },\n  { label: \"Brazil\" },\n  { label: \"British Indian Ocean Territory\" },\n  { label: \"Brunei Darussalam\" }\n]\nconst generateClassName = (rule, styleSheet) =>\n  `${styleSheet.options.classNamePrefix}-${rule.key}`\n\nconst muiTheme0 = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  },\n  typography: {\n    useNextVariants: true,\n    suppressDeprecationWarnings: true\n  }\n})\nstories.addDecorator(withKnobs)\n\nstories.add(\"Complete frame\", () => {\n  const title = text(\"title\", \"Example app\")\n  const test = boolean(\"test\", false)\n  const content = text(\"content\", \"Hello world!\")\n  const userInfo = object(\"userInfo\", {\n    userName: \"Gipsz Jakab\",\n    phoneNumber: 1081\n  })\n\n  return (\n    <CriterionFrame\n      menuConfig={[\n        {\n          label: \"Főoldal\",\n          icon: <HomeIcon />,\n          path: \"/app/index\"\n        },\n        {\n          label: \"Szerződések\",\n          icon: <FileIcon />,\n          path: \"/app/szerzodesek\"\n        },\n        {\n          label: \"Szolgáltatások\",\n          icon: <TagMultipleIcon />,\n          path: \"/app/szolgaltatasok\"\n        }\n      ]}\n      test={test}\n      title={title}\n      onLogout={action(\"Logout clicked!\")}\n      userInfo={userInfo}\n      userInfoRender={(userInfo, test) => (\n        <div>\n          <div>{userInfo.userName}</div>\n          <div>{userInfo.phoneNumber}</div>\n        </div>\n      )}\n      onItemSelected={action(\"item selected\")}\n    >\n      {content}\n    </CriterionFrame>\n  )\n})\n\nconst storiesFormik = storiesOf(\"Form\", module)\nstoriesFormik.addDecorator(withKnobs)\nstoriesFormik.addDecorator(story => (\n  <MuiThemeProvider theme={muiTheme0}>{story()}</MuiThemeProvider>\n))\nstoriesFormik.add(\"TextField\", () => {\n  const label = text(\"Label\", \"Test\")\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        onSubmit={action(\"Submitted: \")}\n        render={() => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField name={\"textfield\"} label={label} />\n            <Button type=\"submit\">Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"TextField heavy (default)\", () => {\n  const label = text(\"Label\", \"Test\")\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        defaultValues={{\n          textfield: \"default value\"\n        }}\n        onSubmit={action(\"Submitted: \")}\n        render={(values, validateForm, submitForm) => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField name={\"textfield0\"} label={label} />\n            <TypeField name={\"textfield1\"} label={label} />\n            <TypeField name={\"textfield2\"} label={label} />\n            <TypeField name={\"textfield3\"} label={label} />\n            <TypeField name={\"textfield4\"} label={label} />\n            <TypeField name={\"textfield5\"} label={label} />\n            <TypeField name={\"textfield6\"} label={label} />\n            <TypeField name={\"textfield7\"} label={label} />\n            <TypeField name={\"textfield8\"} label={label} />\n            <TypeField name={\"textfield9\"} label={label} />\n            <TypeField name={\"textfield10\"} label={label} />\n            <TypeField name={\"textfield11\"} label={label} />\n            <TypeField name={\"textfield12\"} label={label} />\n            <TypeField name={\"textfield13\"} label={label} />\n            <TypeField name={\"textfield14\"} label={label} />\n            <Button onClick={() => submitForm()}>Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"TextField (default)\", () => {\n  const label = text(\"Label\", \"Test\")\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        defaultValues={{\n          textfield: \"default value\"\n        }}\n        onSubmit={action(\"Submitted: \")}\n        render={(values, validateForm, submitForm) => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position={\"end\"}>nap</InputAdornment>\n                )\n              }}\n              name={\"textfield\"}\n              label={label}\n            />\n            <Button onClick={() => submitForm()}>Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"TextField (number)\", () => {\n  const label = text(\"Label\", \"Test\")\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        onSubmit={action(\"Submitted: \")}\n        render={values => {\n          console.log(values)\n          return (\n            <Paper\n              style={{\n                margin: \"15px\",\n                padding: \"5px\",\n                width: \"400px\"\n              }}\n            >\n              <TypeField type={\"number\"} name={\"textfield\"} label={label} />\n              <Button type=\"submit\">Submit</Button>\n            </Paper>\n          )\n        }}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"TextField (default, read only)\", () => {\n  const label = text(\"Label\", \"Test\")\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        defaultValues={{\n          textfield: \"default value read only\"\n        }}\n        onSubmit={action(\"Submitted: \")}\n        render={() => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField readOnly={true} name={\"textfield\"} label={label} />\n            <Button type=\"submit\">Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"Switch (default, converter)\", () => {\n  const label = text(\"Label\", \"Test\")\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        defaultValues={{\n          switch: \"0\"\n        }}\n        onSubmit={action(\"Submitted: \")}\n        render={() => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField\n              converter={value => value === \"1\"}\n              deconverter={value => (value ? \"1\" : \"0\")}\n              name={\"switch\"}\n              label={label}\n              type={\"switch\"}\n            />\n            <Button type=\"submit\">Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"Switch (default, converter, readOnly)\", () => {\n  const label = text(\"Label\", \"Test\")\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        defaultValues={{\n          switch: \"0\"\n        }}\n        onSubmit={action(\"Submitted: \")}\n        render={() => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField\n              converter={value => value === \"1\"}\n              deconverter={value => (value ? \"1\" : \"0\")}\n              readOnly={true}\n              name={\"switch\"}\n              label={label}\n              type={\"switch\"}\n            />\n            <Button type=\"submit\">Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"Select\", () => {\n  const label = text(\"Label\", \"Select test\")\n  const items = Array.from(Array(1000).keys()).map(item => (\n    <MenuItem key={item} value={item}>\n      {item}\n    </MenuItem>\n  ))\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        onSubmit={action(\"Submitted: \")}\n        render={() => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField name={\"select\"} label={label} type={\"select\"}>\n              {items}\n            </TypeField>\n            <Button type=\"submit\">Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"Switch\", () => {\n  const label = text(\"Label\", \"Switch test\")\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        onSubmit={action(\"Submitted: \")}\n        render={() => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField name={\"switch\"} label={label} type={\"switch\"} />\n            <Button type=\"submit\">Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"Checkbox\", () => {\n  const label = text(\"Label\", \"Checkbox test\")\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        onSubmit={action(\"Submitted: \")}\n        render={() => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField name={\"checkbox\"} label={label} type={\"checkbox\"} />\n            <Button type=\"submit\">Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"DateTime picker\", () => {\n  const label = text(\"Label\", \"Time test\")\n  const readOnly = boolean(\"readOnly\", false)\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        onSubmit={action(\"Submitted: \")}\n        render={() => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField readOnly={readOnly} name={\"time\"} label={label} type={\"dateTime\"} />\n            <Button type=\"submit\">Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"Time picker\", () => {\n  const label = text(\"Label\", \"Time test\")\n  const readOnly = boolean(\"readOnly\", false)\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        onSubmit={action(\"Submitted: \")}\n        render={() => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField readOnly={readOnly} name={\"time\"} label={label} type={\"time\"} />\n            <Button type=\"submit\">Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"Date picker\", () => {\n  const label = text(\"Label\", \"Date test\")\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        defaultValues={{}}\n        onSubmit={action(\"Submitted: \")}\n        render={() => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField name={\"date\"} label={label} type={\"date\"} />\n            <Button type=\"submit\">Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nconst ChipperControllerComponent = () => {\n  const defaultValues = [\n    { key: \"0\", label: \"123\" },\n    { key: \"1\", label: \"456\" },\n    { key: \"2\", label: \"6834\" },\n    { key: \"3\", label: \"3teszt\" },\n    { key: \"4\", label: \"4teszt\" },\n    { key: \"5\", label: \"5teszt\" },\n    { key: \"6\", label: \"6teszt\" },\n    { key: \"7\", label: \"7teszt\" }\n  ]\n  const [values, setValues] = useState(defaultValues)\n  return (\n    <Paper\n      style={{\n        margin: \"15px\",\n        padding: \"5px\",\n        width: \"400px\"\n      }}\n    >\n      <ChipperController\n        label={\"Chipper\"}\n        suggestions={defaultValues}\n        value={values}\n        onChange={setValues}\n        name={\"chipper\"}\n        type={\"chipper\"}\n      />\n    </Paper>\n  )\n}\nstories.add(\"ChipperController\", () => <ChipperControllerComponent />)\nstoriesFormik.add(\"Chipper\", () => {\n  const defaultValues = [\n    { key: \"0\", label: \"123\" },\n    { key: \"1\", label: \"456\" },\n    { key: \"2\", label: \"6834\" },\n    { key: \"3\", label: \"3teszt\" },\n    { key: \"4\", label: \"4teszt\" },\n    { key: \"5\", label: \"5teszt\" },\n    { key: \"6\", label: \"6teszt\" },\n    { key: \"7\", label: \"7teszt\" }\n  ]\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        defaultValues={{\n          chipper: defaultValues\n        }}\n        onSubmit={action(\"Submitted: \")}\n        render={() => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField\n              label={\"Chipper\"}\n              suggestions={defaultValues}\n              name={\"chipper\"}\n              type={\"chipper\"}\n            />\n            <Button type=\"submit\">Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\nstoriesFormik.add(\"Validation\", () => {\n  const regex = text(\"Regex\", \"\")\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        onError={action(\"Error: \")}\n        onSubmit={action(\"Submitted: \")}\n        schema={values =>\n          Yup.object().shape({\n            required: Yup.string().required(\"Kötelező mező!\"),\n            select: Yup.number().required(\"Kötelező mező!\"),\n            regex: Yup.string().matches(new RegExp(regex)),\n            date: Yup.string().required(\"Kötelező mező!\")\n          })\n        }\n        render={() => (\n          <Paper\n            style={{\n              margin: \"15px\",\n              padding: \"5px\",\n              width: \"400px\"\n            }}\n          >\n            <TypeField label={\"Required\"} name={\"required\"} />\n            <TypeField label={\"Regex\"} name={\"regex\"} />\n            <TypeField name={\"date\"} label={\"date\"} type={\"date\"} />\n            <TypeField name={\"select\"} label={\"select\"} type={\"select\"}>\n              <MenuItem value={1}>1</MenuItem>\n              <MenuItem value={2}>2</MenuItem>\n              <MenuItem value={3}>3</MenuItem>\n              <MenuItem value={4}>4</MenuItem>\n            </TypeField>\n            <Button type={\"submit\"}>Submit</Button>\n          </Paper>\n        )}\n      />\n    </CriterionProviders>\n  )\n})\n\n/*\nstoriesFormik.add(\"Form editor\", () => {\n  return (\n    <CriterionProviders i18n={i18n}>\n      <FormikContainer\n        onError={action(\"Error: \")}\n        onSubmit={action(\"Submitted: \")}\n        render={() => <FormEditor />}\n      />\n    </CriterionProviders>\n  )\n})\n*/\n"],"mappings":"AAAA","sourceRoot":""}